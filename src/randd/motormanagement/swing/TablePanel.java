/*
** Copyright Â© Bart Kampers
*/

package randd.motormanagement.swing;

import java.awt.*;
import javax.swing.*;
import javax.swing.border.*;
import javax.swing.event.*;
import javax.swing.table.*;
import javax.swing.text.*;
import randd.motormanagement.system.*;


public class TablePanel extends JPanel {

    
    public interface Listener {
        void startIndexPoll(Table table);
        void setValue(Table table, int column, int row, float value);
    }
    

    public TablePanel(Listener listener, Table table) {
        assert listener != null;
        this.tablePanelListener = listener;
        setTable(table);
        initComponents();
        grid.setDefaultRenderer(Object.class, new CellRenderer());
        grid.setDefaultEditor(Object.class, new CellEditor());
        JTableHeader tableHeader = grid.getTableHeader();
        tableHeader.setResizingAllowed(false);
        tableHeader.setEnabled(false);
        RowHeaders headers = new RowHeaders();
        headers.initialize(model, scrollPane);
        grid.getSelectionModel().addListSelectionListener(new ListSelectionListener() {

            @Override
            public void valueChanged(ListSelectionEvent e) {
                followActiveCell = false;
            }
            
        });
    }
    
    
    Table getTable() {
        return table;
    }
    
    
    private void setTable(Table table) {
        if (this.table != null) {
            this.table.removeListener(tableListener);
        }
        this.table = table;
        if (table != null) {
            table.addListener(tableListener);
        }
    }
    
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        scrollPane = new javax.swing.JScrollPane();
        grid = new javax.swing.JTable();

        setLayout(new java.awt.BorderLayout());

        grid.setModel(model);
        grid.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        grid.setGridColor(new java.awt.Color(0, 0, 0));
        grid.setRowSelectionAllowed(false);
        grid.getTableHeader().setReorderingAllowed(false);
        scrollPane.setViewportView(grid);

        add(scrollPane, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents


    private class Model extends DefaultTableModel {
        
        @Override
        public int getColumnCount() {
            return (table != null) ? table.getColumnCount() : 0;
        }

        @Override
        public int getRowCount() {
            return (table != null) ? table.getColumnCount() : 0;
        }
        
        @Override
        public Object getValueAt(int row, int column) {
            return table.getField(column, row);
        }
        
        @Override
        public void setValueAt(Object value, int row, int column) {
            try {
                float floatValue = Float.parseFloat(value.toString());
                tablePanelListener.setValue(table, column, row, floatValue);
            }
            catch (NumberFormatException ex) {
                JOptionPane.showMessageDialog(
                    TablePanel.this, 
                    value.toString(), 
                    "Invalid input",
                    JOptionPane.ERROR_MESSAGE);
            }
        }

    }
    
    
    private class RowHeaders extends bka.swing.TableRowHeaders {
        
        @Override
        public String cornerName() {
            return "RPM / Load";
        }
        
    };
    
    
    private class CellRenderer extends DefaultTableCellRenderer {
        
        CellRenderer() {
            setHorizontalAlignment(DefaultTableCellRenderer.RIGHT);
            activeRenderer = new JLabel();
            activeRenderer.setHorizontalAlignment(DefaultTableCellRenderer.RIGHT);
            activeRenderer.setOpaque(true);
            activeRenderer.setBackground(Color.YELLOW);
            activeRenderer.setBorder(new LineBorder(Color.ORANGE, 1));
        }
        
        @Override
        public Component getTableCellRendererComponent(JTable grid, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
            if (column == table.getColumnIndex() && row == table.getRowIndex()) {
                activeColumn = column;
                activeRow = row;
                activeRenderer.setText(value.toString());
                return activeRenderer;
            }
            else {
                return super.getTableCellRendererComponent(grid, value, isSelected, hasFocus, row, column);
            }
        }
        
        private final JLabel activeRenderer;
        
    }
    
    
    private class CellEditor extends DefaultCellEditor {

        CellEditor() {
            super(new JFormattedTextField(java.text.NumberFormat.getNumberInstance()));
            JFormattedTextField field = (JFormattedTextField) this.getComponent();
            field.setBorder(new LineBorder(Color.BLUE, 1));
            ((AbstractDocument) field.getDocument()).setDocumentFilter(new NumberFilter());
        }
        
    }
    
    
    private class NumberFilter extends DocumentFilter {
        
        @Override
        public void insertString(FilterBypass bypass, int offset, String string, AttributeSet attributes) throws BadLocationException {
            bypass.insertString(offset, replace(string), attributes);
        }

        @Override
        public void replace(FilterBypass bypass, int offset, int length, String string, AttributeSet attributes) throws BadLocationException {
            bypass.replace(offset, length, replace(string), attributes);
        }
        
        private String replace(String newString) {
            try {
                /*float value = */Float.parseFloat(newString);
                actual = newString;
            }
            catch (NumberFormatException ex) {
                if (newString.indexOf('.') == newString.length() - 1) {
                    actual = newString;
                }
            }
            return actual;
        }
        
        private String actual = "";
        
    }    
    
    
    private class TableListener implements Table.Listener {

        @Override
        public void created(Table table) {
            if (table == TablePanel.this.table) {
                model.fireTableStructureChanged();
            }
        }
        
        @Override
        public void modified(Table table) {
            int rowIndex = table.getRowIndex();
            int columnIndex = table.getColumnIndex();
            if (rowIndex != activeRow || columnIndex != activeColumn) {
                fireTableCellUpdated(activeRow, activeColumn);
                fireTableCellUpdated(rowIndex, columnIndex);
            }
            if (followActiveCell) {
                Rectangle rectangle = grid.getCellRect(table.getRowIndex(), table.getColumnIndex(), true);
                grid.scrollRectToVisible(rectangle);
            }
        }
        
        @Override
        public void modified(Table table, int column, int row) {
            fireTableCellUpdated(row, column);
        }
        
        private void fireTableCellUpdated(int row, int column) {
            if (0 <= row && row < model.getRowCount() && 0 <= column && column < model.getColumnCount()) {
                model.fireTableCellUpdated(row, column);
            }
        }
        
    }

    
    private final Listener tablePanelListener;
    private Table table;   
    
    private int activeColumn = -1;
    private int activeRow = -1;
    private boolean followActiveCell = true;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable grid;
    private javax.swing.JScrollPane scrollPane;
    // End of variables declaration//GEN-END:variables

    private final Model model = new Model();
    private final TableListener tableListener = new TableListener();
    
}
