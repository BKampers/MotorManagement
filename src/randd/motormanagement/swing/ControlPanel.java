package randd.motormanagement.swing;


import bka.communication.*;
import java.util.logging.Level;
import java.util.logging.Logger;


public class ControlPanel extends javax.swing.JPanel {

    /**
     * Creates new form ControlPanel
     */
    public ControlPanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        externalTicksLabel = new javax.swing.JLabel();
        externalTicksSpinner = new javax.swing.JSpinner();

        externalTicksLabel.setText("External Ticks");

        externalTicksSpinner.setModel(new javax.swing.SpinnerNumberModel(1000, 0, 1000000, 100));
        externalTicksSpinner.setEditor(new javax.swing.JSpinner.NumberEditor(externalTicksSpinner, "#"));
        externalTicksSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                externalTicksSpinner_stateChanged(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(externalTicksLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(externalTicksSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(178, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(externalTicksLabel)
                    .addComponent(externalTicksSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(266, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    
    private void externalTicksSpinner_stateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_externalTicksSpinner_stateChanged
        openConnection();
        String message = "{\"ExternalTicks\":" + externalTicksSpinner.getValue() + "}";
        channel.send(message.getBytes());
    }//GEN-LAST:event_externalTicksSpinner_stateChanged

    
    private void openConnection() {
        if (channel == null) {
            try {
                channel = SocketChannel.create("localhost", Monitor.RANDD_CONTROL_PORT);
                channel.open(ControlPanel.class.getName());
            }
            catch (ChannelException ex) {
                Logger.getLogger(ControlPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel externalTicksLabel;
    private javax.swing.JSpinner externalTicksSpinner;
    // End of variables declaration//GEN-END:variables
    
    private Channel channel;
    
}
