/*
** Copyright Â© Bart Kampers
*/

package randd.motormanagement.swing;


import java.util.logging.*;
import javax.swing.*;
import org.json.*;
import randd.motormanagement.system.Engine;


public class EnginePanel extends JPanel {


    public interface Listener {
        void cylinderCountModified(int count);
        void cogwheelTypeModified(int cogTotal, int gapSize);
        void offsetModified(int offset);
    }
    
    
    public EnginePanel(Engine engine) {
        this.engine = engine;
        initComponents();
        java.util.List<CogwheelType> cogwheelTypes = loadCogwheelTypes();
        if (! cogwheelTypes.isEmpty()) {
            initCogwheelComboBox(cogwheelTypes);
        }
        else {
            initCogwheelSpinners();
        }
        offsetSpinner.setModel(offsetSpinnerModel);
        engine.addListener(new EngineListener());
    }
    
    
    void activate() {
        cogwheelEditable = false;
        cylinderCountEditable = false;
        enableControls();
    }

    void setListener(Listener listener) {
        this.listener = listener;
    }


 /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        scrollPane = new javax.swing.JScrollPane();
        controlPanel = new javax.swing.JPanel();
        cogwheelTypeLabel = new javax.swing.JLabel();
        cogwheelTypePanel = new javax.swing.JPanel();
        offsetLabel = new javax.swing.JLabel();
        offsetSpinner = new javax.swing.JSpinner();
        cylinderComboBox = new javax.swing.JComboBox();

        scrollPane.setViewportView(cogwheelRenderer);

        controlPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        cogwheelTypeLabel.setText(Bundle.getInstance().get("CogWheel"));

        javax.swing.GroupLayout controlPanelLayout = new javax.swing.GroupLayout(controlPanel);
        controlPanel.setLayout(controlPanelLayout);
        controlPanelLayout.setHorizontalGroup(
            controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(controlPanelLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(cogwheelTypeLabel)
                .addContainerGap(58, Short.MAX_VALUE))
            .addComponent(cogwheelTypePanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        controlPanelLayout.setVerticalGroup(
            controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(controlPanelLayout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(cogwheelTypeLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cogwheelTypePanel, javax.swing.GroupLayout.DEFAULT_SIZE, 16, Short.MAX_VALUE)
                .addContainerGap())
        );

        offsetLabel.setText(Bundle.getInstance().get("Offset"));

        offsetSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                offsetSpinner_stateChanged(evt);
            }
        });

        cylinderComboBox.setModel(new CylinderComboBoxModel());
        cylinderComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cylinderComboBox_actionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(controlPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(offsetLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(offsetSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addComponent(cylinderComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 64, Short.MAX_VALUE)
                .addComponent(scrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 277, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(controlPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(offsetSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(offsetLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cylinderComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(scrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 288, Short.MAX_VALUE))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents


    private void initCogwheelComboBox(java.util.List<CogwheelType> types) {
        cogwheelTypeComboBox = new JComboBox<>(new CogwheelTypeComboBoxModel(types));
        cogwheelTypeComboBox.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cogwheelTypeComboBox_actionPerformed(evt);
            }
        });
        cogwheelTypePanel.add(cogwheelTypeComboBox);
    }
    
    
    private void initCogwheelSpinners() {
        cogTotalSpinner = new JSpinner();
        minusLabel = new JLabel();
        gapSizeSpinner = new JSpinner();
        cogTotalSpinner.setMinimumSize(new java.awt.Dimension(48, 28));
        cogTotalSpinner.setPreferredSize(new java.awt.Dimension(48, 28));
        cogTotalSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            @Override
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                cogTotalSpinner_stateChanged(evt);
            }
        });
        minusLabel.setText("-");
        gapSizeSpinner.setMinimumSize(new java.awt.Dimension(40, 28));
        gapSizeSpinner.setPreferredSize(new java.awt.Dimension(40, 28));
        gapSizeSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            @Override
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                gapSizeSpinner_stateChanged(evt);
            }
        });
        cogTotalSpinner.setModel(totalCogSpinnerModel);
        gapSizeSpinner.setModel(gapLengthSpinnerModel);
        cogwheelTypePanel.add(cogTotalSpinner);
        cogwheelTypePanel.add(minusLabel);
        cogwheelTypePanel.add(gapSizeSpinner);
    }
    
    
    private void cogwheelTypeComboBox_actionPerformed(java.awt.event.ActionEvent evt) {
        if (listener != null && cogwheelTypeComboBox.isPopupVisible()) {
            cogwheelEditable = false;
            enableControls();
            CogwheelType type = (CogwheelType) cogwheelTypeComboBox.getSelectedItem();
            listener.cogwheelTypeModified(type.cogTotal, type.gapSize);
        }
    }
    
    
    private void cogTotalSpinner_stateChanged(javax.swing.event.ChangeEvent evt) {                                              
        if (listener != null && cogTotalSpinner.isEnabled()) {
            cogwheelEditable = false;
            enableControls();
            listener.cogwheelTypeModified((Integer) cogTotalSpinner.getValue(), (Integer) gapSizeSpinner.getValue());
        }
    }                                             

    
    private void gapSizeSpinner_stateChanged(javax.swing.event.ChangeEvent evt) {                                             
        if (listener != null && gapSizeSpinner.isEnabled()) {
            cogwheelEditable = false;
            enableControls();
            listener.cogwheelTypeModified((Integer) cogTotalSpinner.getValue(), (Integer) gapSizeSpinner.getValue());
        }
    }                                            
    

    private void offsetSpinner_stateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_offsetSpinner_stateChanged
        if (listener != null && offsetSpinner.isEnabled()) {
            cogwheelEditable = true;
            enableControls();
            listener.offsetModified((Integer) offsetSpinner.getValue());
        }
    }//GEN-LAST:event_offsetSpinner_stateChanged

    
    private void cylinderComboBox_actionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cylinderComboBox_actionPerformed
        if (listener != null && cylinderComboBox.isPopupVisible()) {
            cylinderCountEditable = false;
            enableControls();
            listener.cylinderCountModified(((CylinderCount) cylinderComboBox.getSelectedItem()).count);
        }
    }//GEN-LAST:event_cylinderComboBox_actionPerformed

    
    private void enableControls() {
        Boolean engineRunning = engine.isRunning();
        boolean cogwheelModifyable = engineRunning != null && !engineRunning && cogwheelEditable;
        boolean cylinderCountModifyable = engineRunning != null && !engineRunning && cylinderCountEditable;
        if (cogwheelTypeComboBox != null) {
            cogwheelTypeComboBox.setEnabled(cogwheelModifyable);
        }
        if (cogTotalSpinner != null) {
            cogTotalSpinner.setEnabled(cogwheelModifyable);
        }
        if (gapSizeSpinner != null) {
            gapSizeSpinner.setEnabled(cogwheelModifyable);
        }
        offsetSpinner.setEnabled(cogwheelModifyable);
        cylinderComboBox.setEnabled(cylinderCountModifyable);
    }


    private void updateCogwheelRenderer() {
        Engine.Cogwheel cogwheel = engine.getCogwheel();
        if (cogwheel != null) {
            cogwheelRenderer.setCogCount(cogwheel.getCogTotal() - cogwheel.getGapSize());
            cogwheelRenderer.setGapLength(cogwheel.getGapSize());
            cogwheelRenderer.setDeadPoints(engine.getDeadPoints());
            cogwheelRenderer.repaint();
        }
    }
    
    
    private java.util.List<CogwheelType> loadCogwheelTypes() {
        java.util.List<CogwheelType> types = new java.util.ArrayList<>();
        Resource resource = new Resource("randd/motormanagement/Cogwheel.json");
        try {
            JSONObject cogwheelObject = new JSONObject(resource.loadText());
            JSONArray typesArray = cogwheelObject.getJSONArray("CogwheelType");
            int count = typesArray.length();
            for (int i = 0; i < count; ++i) {
                JSONObject typeObject = typesArray.getJSONObject(i);
                types.add(new CogwheelType(typeObject.getInt("cogTotal"), typeObject.getInt("gapSize")));
            }
        }
        catch (java.io.IOException | JSONException ex) {
            logger.log(Level.WARNING, null, ex);
        }
        return types;
    }
    
    
    private class EngineListener implements Engine.Listener {

        @Override
        public void propertyChanged(Engine engine, Engine.Property property) {
            if (engine == EnginePanel.this.engine) {
                logger.log(Level.FINE, "{0} changed", property);
                switch (property) {
                    case IS_RUNNING:
                        enableControls();
                        break;
                    case COGWHEEL:
                        updateCogwheelControls(engine.getCogwheel());
                        break;
                    case CYLINDER_COUNT:
                        cylinderComboBox.setSelectedItem(CylinderCount.get(engine.getCylinderCount()));
                        break;
                    case DEAD_POINTS:
                        updateCogwheelRenderer();
                        cogwheelEditable = true;
                        cylinderCountEditable = true;
                        enableControls();
                        break;
                }                    
            }
        }

        private void updateCogwheelControls(Engine.Cogwheel cogwheel) {
            if (cogwheelTypeComboBox != null) {
                selectCogwheelType(cogwheel);
            }
            if (cogTotalSpinner != null) {
                cogTotalSpinner.setValue(cogwheel.getCogTotal());
            }
            if (gapSizeSpinner != null) {
                gapSizeSpinner.setValue(cogwheel.getGapSize());
            }
            offsetSpinner.setEnabled(false);
            offsetSpinner.setValue(cogwheel.getOffset());
            offsetSpinner.setEnabled(true);
        }
        
        private void selectCogwheelType(Engine.Cogwheel cogwheel) {
            CogwheelTypeComboBoxModel model = (CogwheelTypeComboBoxModel) cogwheelTypeComboBox.getModel();
            CogwheelType type = model.getCogwheelType(cogwheel.getCogTotal(), cogwheel.getGapSize());
            cogwheelTypeComboBox.setSelectedItem(type);
        }

    }
    
    
    private class CogwheelTypeComboBoxModel extends DefaultComboBoxModel<CogwheelType> {
        
        CogwheelTypeComboBoxModel(java.util.List<CogwheelType> types) {
            this.types = types;
        }
        
        @Override
        public int getSize() {
            return types.size();
        }
        
        @Override
        public CogwheelType getElementAt(int index) {
            return types.get(index);
        }
        
        CogwheelType getCogwheelType(int cogTotal, int gapSize) {
            for (CogwheelType type : types) {
                if (type.cogTotal == cogTotal && type.gapSize == gapSize) {
                    return type;
                }
            }
            CogwheelType newType = new CogwheelType(cogTotal, gapSize);
            types.add(newType);
            return newType;
        }
        
        java.util.List<CogwheelType> types;
    }
    
    
    private class CylinderComboBoxModel extends DefaultComboBoxModel<CylinderCount> {

        @Override
        public int getSize() {
            return CylinderCount.values().length;
        }

        @Override
        public CylinderCount getElementAt(int index) {
            return CylinderCount.values()[index];
        }
        
    }
    
    
    private class CogwheelType {
        
        CogwheelType(int cogTotal, int gapSize) {
            this.cogTotal = cogTotal;
            this.gapSize  = gapSize;
        }
        
        @Override
        public String toString() {
            if (title == null) {
                StringBuilder builder = new StringBuilder();
                builder.append(cogTotal);
                builder.append(" - ");
                builder.append(gapSize);
                title = builder.toString();
            }
            return title;
        }
                
        int cogTotal;
        int gapSize;
        
        private String title;
    }
    
    
    private enum CylinderCount {
        FOUR(4), SIX(6), EIGHT(8);
        
        CylinderCount(int count) {
            this.count = count;
        }
        
        static CylinderCount get(int count) {
            for (CylinderCount cylinderCount : values()) {
                if (cylinderCount.count == count) {
                    return cylinderCount;
                }
            }
            return null;
        }
        
        @Override
        public String toString() {
            if (title == null) {
                Object[] params = {count};
                title = java.text.MessageFormat.format(Bundle.getInstance().get("CylinderCount"), params);
            }
            return title;
        }
        
        int count;
        
        private String title;
    }
    
    
    private final Engine engine;
    private Listener listener;
    
    
    private boolean cogwheelEditable = false;
    private boolean cylinderCountEditable = false;
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel cogwheelTypeLabel;
    private javax.swing.JPanel cogwheelTypePanel;
    private javax.swing.JPanel controlPanel;
    private javax.swing.JComboBox cylinderComboBox;
    private javax.swing.JLabel offsetLabel;
    private javax.swing.JSpinner offsetSpinner;
    private javax.swing.JScrollPane scrollPane;
    // End of variables declaration//GEN-END:variables

    private JComboBox<CogwheelType> cogwheelTypeComboBox;

    private JSpinner cogTotalSpinner;
    private JSpinner gapSizeSpinner;
    private JLabel minusLabel;
    
    private final CogwheelRenderer cogwheelRenderer = new CogwheelRenderer();
    
    private final SpinnerNumberModel totalCogSpinnerModel = new SpinnerNumberModel(60, 2, 200, 1);
    private final SpinnerNumberModel gapLengthSpinnerModel = new SpinnerNumberModel(2, 1, 9, 1);
    private final SpinnerNumberModel offsetSpinnerModel = new SpinnerNumberModel(20, 1, 100, 1);
    
    
    private final Logger logger = Logger.getLogger(EnginePanel.class.getName());
        
}
