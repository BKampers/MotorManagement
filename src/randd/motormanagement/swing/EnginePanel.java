/*
** Copyright Â© Bart Kampers
*/

package randd.motormanagement.swing;


import javax.swing.*;

import randd.motormanagement.system.Engine;


public class EnginePanel extends javax.swing.JPanel {


    public interface Listener {
        void cylinderCountModified(int count);
        void totalCogsModified(int totalCogs);
        void gapSizeModified(int gapSize);
        void offsetModified(int offset);
    }
    
    
    public EnginePanel(Engine engine) {
        this.engine = engine;
        initComponents();
        cogTotalSpinner.setModel(totalCogSpinnerModel);
        gapSizeSpinner.setModel(gapLengthSpinnerModel);
        offsetSpinner.setModel(offsetSpinnerModel);
        engine.addListener(new EngineListener());
    }
    
    
    void setListener(Listener listener) {
        this.listener = listener;
    }


    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        scrollPane = new javax.swing.JScrollPane();
        controlPanel = new javax.swing.JPanel();
        typeLabel = new javax.swing.JLabel();
        cogTotalSpinner = new javax.swing.JSpinner();
        minusLabel = new javax.swing.JLabel();
        gapSizeSpinner = new javax.swing.JSpinner();
        offsetLabel = new javax.swing.JLabel();
        offsetSpinner = new javax.swing.JSpinner();
        cylinderComboBox = new javax.swing.JComboBox();

        scrollPane.setViewportView(cogwheelRenderer);

        controlPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        typeLabel.setText(Bundle.getInstance().get("CogWheel"));

        cogTotalSpinner.setMinimumSize(new java.awt.Dimension(40, 28));
        cogTotalSpinner.setPreferredSize(new java.awt.Dimension(40, 28));
        cogTotalSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                cogTotalSpinner_stateChanged(evt);
            }
        });

        minusLabel.setText("-");

        gapSizeSpinner.setMinimumSize(new java.awt.Dimension(40, 28));
        gapSizeSpinner.setPreferredSize(new java.awt.Dimension(40, 28));
        gapSizeSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                gapSizeSpinner_stateChanged(evt);
            }
        });

        javax.swing.GroupLayout controlPanelLayout = new javax.swing.GroupLayout(controlPanel);
        controlPanel.setLayout(controlPanelLayout);
        controlPanelLayout.setHorizontalGroup(
            controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(controlPanelLayout.createSequentialGroup()
                .addGroup(controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(controlPanelLayout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addComponent(typeLabel))
                    .addGroup(controlPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(cogTotalSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(minusLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(gapSizeSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(18, Short.MAX_VALUE))
        );
        controlPanelLayout.setVerticalGroup(
            controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(controlPanelLayout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(typeLabel)
                .addGap(12, 12, 12)
                .addGroup(controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cogTotalSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(minusLabel)
                    .addComponent(gapSizeSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(12, Short.MAX_VALUE))
        );

        offsetLabel.setText(Bundle.getInstance().get("Offset"));

        offsetSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                offsetSpinner_stateChanged(evt);
            }
        });

        cylinderComboBox.setModel(new CylinderComboBoxModel());
        cylinderComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cylinderComboBox_actionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(controlPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(offsetLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(offsetSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addComponent(cylinderComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 64, Short.MAX_VALUE)
                .addComponent(scrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 277, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(controlPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(offsetSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(offsetLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cylinderComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(scrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 288, Short.MAX_VALUE))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    
    private void cogTotalSpinner_stateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_cogTotalSpinner_stateChanged
        if (listener != null && cogTotalSpinner.isEnabled()) {
            listener.totalCogsModified((Integer) cogTotalSpinner.getValue());
        }
    }//GEN-LAST:event_cogTotalSpinner_stateChanged

    
    private void gapSizeSpinner_stateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_gapSizeSpinner_stateChanged
        if (listener != null && gapSizeSpinner.isEnabled()) {
            listener.gapSizeModified((Integer) gapSizeSpinner.getValue());
        }
    }//GEN-LAST:event_gapSizeSpinner_stateChanged

    
    private void offsetSpinner_stateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_offsetSpinner_stateChanged
        if (listener != null && offsetSpinner.isEnabled()) {
            listener.offsetModified((Integer) offsetSpinner.getValue());
        }
    }//GEN-LAST:event_offsetSpinner_stateChanged

    
    private void cylinderComboBox_actionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cylinderComboBox_actionPerformed
        if (listener != null && cylinderComboBox.isEnabled()) {
            listener.cylinderCountModified(((CylinderCount) cylinderComboBox.getSelectedItem()).count);
        }
    }//GEN-LAST:event_cylinderComboBox_actionPerformed

    
    private void updateCogwheelRenderer() {
        Engine.Cogwheel cogwheel = engine.getCogwheel();
        cogwheelRenderer.setCogCount(cogwheel.getCogTotal() - cogwheel.getGapSize());
        cogwheelRenderer.setGapLength(cogwheel.getGapSize());
        cogwheelRenderer.setDeadPoints(engine.getDeadPoints());
        cogwheelRenderer.repaint();
    }
    
    
    private class EngineListener implements Engine.Listener {

        @Override
        public void propertyChanged(Engine engine, Engine.Property property) {
            if (engine == EnginePanel.this.engine) {
                switch (property) {
                    case COGWHEEL:
                        cogTotalSpinner.setValue(engine.getCogwheel().getCogTotal());
                        gapSizeSpinner.setValue(engine.getCogwheel().getGapSize());
                        offsetSpinner.setValue(engine.getCogwheel().getOffset());
                        break;
                    case CYLINDER_COUNT:
                        cylinderComboBox.setSelectedItem(CylinderCount.get(engine.getCylinderCount()));
                        break;
                    case DEAD_POINTS:
                        updateCogwheelRenderer();
                        break;
                }                    
            }
        }
        
    }
    
    
    private class CylinderComboBoxModel extends javax.swing.DefaultComboBoxModel<CylinderCount> {

        @Override
        public int getSize() {
            return CylinderCount.values().length;
        }

        @Override
        public CylinderCount getElementAt(int index) {
            return CylinderCount.values()[index];
        }
        
    }
    
    
    private enum CylinderCount {
        FOUR(4), SIX(6), EIGHT(8);
        
        CylinderCount(int count) {
            this.count = count;
        }
        
        static CylinderCount get(int count) {
            for (CylinderCount cylinderCount : values()) {
                if (cylinderCount.count == count) {
                    return cylinderCount;
                }
            }
            return null;
        }
        
        @Override
        public String toString() {
            Object[] params = {count};
            return java.text.MessageFormat.format(Bundle.getInstance().get("CylinderCount"), params);
        }
        
        int count;
    }
    
    
    private final Engine engine;
    
    private Listener listener;
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JSpinner cogTotalSpinner;
    private javax.swing.JPanel controlPanel;
    private javax.swing.JComboBox cylinderComboBox;
    private javax.swing.JSpinner gapSizeSpinner;
    private javax.swing.JLabel minusLabel;
    private javax.swing.JLabel offsetLabel;
    private javax.swing.JSpinner offsetSpinner;
    private javax.swing.JScrollPane scrollPane;
    private javax.swing.JLabel typeLabel;
    // End of variables declaration//GEN-END:variables

    private final CogwheelRenderer cogwheelRenderer = new CogwheelRenderer();
    
    private final SpinnerNumberModel totalCogSpinnerModel = new SpinnerNumberModel(60, 2, 200, 1);
    private final SpinnerNumberModel gapLengthSpinnerModel = new javax.swing.SpinnerNumberModel(2, 1, 9, 1);
    private final SpinnerNumberModel offsetSpinnerModel = new SpinnerNumberModel(20, 1, 100, 1);
        
}
